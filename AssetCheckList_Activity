package thoth.scmapp.scanrepair;

import android.app.Activity;
import android.app.Dialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Message;
import android.text.Editable;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.style.ForegroundColorSpan;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import com.zebra.adc.decoder.Barcode2DWithSoft;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import my.function_library.Controls.AutoPagingListView;
import my.function_library.Controls.GroupAdapter;
import my.function_library.Controls.SideBar;
import my.function_library.HelperClass.DownNetWorkHelper;
import my.function_library.HelperClass.HelperManager;
import my.function_library.HelperClass.Model.CustormDialog;
import my.function_library.HelperClass.Model.DefaultErrorListener;
import my.function_library.HelperClass.Model.DefaultSuccessListener;
import my.function_library.HelperClass.Model.LogUtils;
import my.function_library.HelperClass.Model.MasterActivity;
import my.function_library.Receiver.ScannerReceiver;
import thoth.scmapp.R;
import thoth.scmapp.assets_check.Product_Activity;
import thoth.scmapp.model.Assets;
import thoth.scmapp.model.Dept_Check;
import thoth.scmapp.model.Drop_Down_Item;
import thoth.scmapp.modelManager.Pub_User_Manager;
import thoth.scmapp.utils.DropDownSources;
import thoth.scmapp.utils.MipcaActivityCapture;
import thoth.scmapp.utils.PubUtils;
import thoth.scmapp.utils.ScaningDeviceBarcode_CW;
import thoth.scmapp.utils.ScaningDeviceBarcode_ZL;
import thoth.scmapp.utils.ScanningDevice;

public class AssetCheckList_Activity extends MasterActivity {
    private ImageView Back_ImageView,Search_ImageView,iv_sys;
    private AutoPagingListView Assets_ListView;
    private Dept_Check mDept_Check;
    private LinkedList<HashMap<String, String>> mRows=new LinkedList<HashMap<String, String>>();
    private GroupAdapter adapter;
    private TextView Qb_TextView,Yqc_TextView,Wqc_TextView,Cancel_TextView,Title_TextView,tv_scantype_content;
    private TextView tv_finish;
    private LinearLayout Bj_LinearLayout,ll_scantype,ll_asset_scan;
    private EditText KeyWrod_EditText;
    private ScannerReceiver mScannerReceiver;
    private final int Product_Change=1,ScanResults_Change=2,SCANNIN_GREQUEST_CODE=3;
    private int v_003;
    private CustormDialog mCustormDialog1;
    private String mSCM_PDA_CAM_SCAN;
    private ScaningDeviceBarcode_CW mReaderBarcode;
    private ScaningDeviceBarcode_ZL mReaderBarcode_ZL;
    private String mSaoMaBind;
    private  TextView tv_asset_scan;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_asset_ckecklist);
        tv_asset_scan=(TextView) this.findViewById(R.id.tv_asset_scan);
        Back_ImageView=(ImageView)this.findViewById(R.id.Back_ImageView);
        Search_ImageView=(ImageView)this.findViewById(R.id.Search_ImageView);
        iv_sys=(ImageView)this.findViewById(R.id.iv_sys);
        Qb_TextView=(TextView)this.findViewById(R.id.Qb_TextView);
        Yqc_TextView=(TextView)this.findViewById(R.id.Yqc_TextView);
        Wqc_TextView=(TextView)this.findViewById(R.id.Wqc_TextView);
        Cancel_TextView=(TextView)this.findViewById(R.id.Cancel_TextView);
        Title_TextView=(TextView)this.findViewById(R.id.Title_TextView);
        KeyWrod_EditText=(EditText)this.findViewById(R.id.KeyWrod_EditText);
        tv_scantype_content=(TextView)this.findViewById(R.id.tv_scantype_content);
        tv_finish=(TextView)this.findViewById(R.id.tv_finish);
        Assets_ListView=(AutoPagingListView)this.findViewById(R.id.Assets_ListView);
        Bj_LinearLayout=(LinearLayout)this.findViewById(R.id.Bj_LinearLayout);
        ll_scantype=(LinearLayout)this.findViewById(R.id.ll_scantype);
        ll_asset_scan=(LinearLayout)this.findViewById(R.id.ll_asset_scan);

        Back_ImageView.setOnClickListener(Back_ImageView_Click);
        Search_ImageView.setOnClickListener(Search_ImageView_Click);
        iv_sys.setOnClickListener(iv_sys_Click);
        Qb_TextView.setOnClickListener(Qb_TextView_Click);
        Yqc_TextView.setOnClickListener(Yqc_TextView_Click);
        Wqc_TextView.setOnClickListener(Wqc_TextView_Click);
        Cancel_TextView.setOnClickListener(Cancel_TextView_Click);
        KeyWrod_EditText.addTextChangedListener(textWatcher);
        ll_scantype.setOnClickListener(ll_scantype_Click);
        tv_finish.setOnClickListener(tv_finish_Click);
        tv_asset_scan.setOnClickListener(tv_asset_scan_click);
        mCustormDialog1=new CustormDialog(this, "系统提示", "请输入科室确认人的工号和密码!", true, R.layout.confimdialog_prompt4, R.style.CustormDialog_Mask);

        mSaoMaBind = HelperManager.getAppConfigHelper().getDataString("saomabind", "0");
        init();


    }
    /**
     * 初始化
     */
    public void init(){

        int user1_realrows = Pub_User_Manager.getSington().delete("PUB_USER.HOSPITAL_ID = '00001' and PUB_USER.rowid not in ( select MAX(PUB_USER.rowid) FROM PUB_USER where PUB_USER.HOSPITAL_ID='00001' group by PUB_USER.USER_ID )",new String[]{});//删除重复
        LogUtils.d("debug", "人员数据有：" + user1_realrows + "条数据删除");
        //查询最终
        List<Map<String, String>> rowsperson;
        rowsperson = Pub_User_Manager.getSington().queryList("select date(max(MODIFY_DATE)) MODIFY_DATE,count(1) HJ from " + Pub_User_Manager.getSington().getTableName() + " where HOSPITAL_ID = '00001'", null);
        if (rowsperson != null && rowsperson.size() > 0) {
            Map<String, String> person = rowsperson.get(0);
            if (person.containsKey("MODIFY_DATE")) {
                Log.d("debug", "查询人员最终时间" + person.get("MODIFY_DATE") + "人员最终数量" + person.get("HJ"));
            }
        }

        if(DropDownSources.getComment_State().size()==0){
            Toast.makeText(AssetCheckList_Activity.this, "请先维护007240字典信息!", Toast.LENGTH_SHORT).show();
            finish();
            return;
        }
        v_003=this.loadVoice(R.raw.v_003, 1);
        Intent intent=this.getIntent();
        mDept_Check=(Dept_Check)intent.getSerializableExtra("dept_check");
        Title_TextView.setText(mDept_Check.DEPT_NAME);
        adapter = new GroupAdapter(this, null, R.layout.listitem_assetscheck,
                new String[] { "PRODUCT_NAME", "SERIAL_CODE", "ACC_TYPE", "SPEC_NAME", "DEPT_NAME", "CHECK_DEPT_NAME" },
                new int[] { R.id.product_name, R.id.serial_code, R.id.acc_type, R.id.spec_name, R.id.dept_name,
                        R.id.check_dept_name },
                "FIRST", R.id.group);
        adapter.setOnBindDataToViewListener(onBindDataToViewListener);
        Assets_ListView.setAdapter(adapter);

        //为了界面不变，兼容东大扫描机
        if(ScanningDevice.getSington().checkServiceAndDevice()==1){
            ll_scantype.setVisibility(View.VISIBLE);
            ll_scantype.callOnClick();
        }else{
            ll_scantype.setVisibility(View.GONE);
        }
        initData();
        mSCM_PDA_CAM_SCAN=HelperManager.getAppConfigHelper().getDataString("scm_pda_cam_scan", "0");
        if("1".equals(mSCM_PDA_CAM_SCAN)){
            iv_sys.setVisibility(View.VISIBLE);
        }
    }
    public void refresh(){
        recount();
        if(Qb_TextView.isFocused()){ Qb_TextView.callOnClick(); }
        else if(Yqc_TextView.isFocused()){ Yqc_TextView.callOnClick(); }
        else if(Wqc_TextView.isFocused()){ Wqc_TextView.callOnClick(); }
        else{
            AssetCheckList_Activity.this.playVoice(v_003);
            Qb_TextView.callOnClick();
        }
    }
    /**
     * 刷新
     */
    public void initData(){
        String server_url= HelperManager.getAppConfigHelper().getDataString(getResources().getString(R.string.server_url), "")
                + getResources().getString(R.string.assets_check_check_all);
        String store_id=HelperManager.getAppConfigHelper().getDataString("store_id", "");
        String position_id=HelperManager.getAppConfigHelper().getDataString("position_id", "");
        HashMap<String, String> parms = new HashMap<String, String>();
        parms.put("hospital_id", HelperManager.getAppConfigHelper().getDataString("hospital_id", ""));
        parms.put("dept_id", mDept_Check.DEPT_ID);
        if (!TextUtils.isEmpty(store_id)) { parms.put("store_id", store_id); }
        if (!TextUtils.isEmpty(position_id)) { parms.put("position_id", position_id); }
        Dialog mDialog = AssetCheckList_Activity.this.showLoadingCustormDialog();
        HelperManager.getDownNetWorkHelper().postString(server_url, parms, Assets_Success,new DefaultErrorListener(mDialog));
    }
    /**
     * 数据成功返回
     */
    DownNetWorkHelper.SuccessListener<String> Assets_Success = new DownNetWorkHelper.SuccessListener<String>() {

        @Override
        public void onResponse(String arg0) {
            JsonObject json = DefaultSuccessListener.getJsonObjectRules(arg0);
            if (json == null) {
                AssetCheckList_Activity.this.dismissCustormDialog();
                return;
            }

            JsonObject data = json.getAsJsonObject("data");
            java.lang.reflect.Type listType = new TypeToken<LinkedList<HashMap<String, String>>>() {}.getType();
            mRows = HelperManager.getEntityHelper().toListEntity(data.get("rows"),listType);

            refresh();
            AssetCheckList_Activity.this.dismissCustormDialog();
        }
    };
    /**
     * 重新计算
     */
    public void recount(){
        int yingqc=0,yqc=0,wqc=0;
        for(HashMap<String, String> item:mRows){
            String DEPT_ID=item.containsKey("DEPT_ID")?item.get("DEPT_ID"):"";
            int CHECK_FLAG=item.containsKey("CHECK_FLAG")?Integer.parseInt((String)item.get("CHECK_FLAG")):0;
            if(mDept_Check.DEPT_ID.equals(DEPT_ID)){
                yingqc++;
                if(CHECK_FLAG==0){
                    wqc++;
                }
            }
            if(CHECK_FLAG==1){
                yqc++;
            }
        }
        Qb_TextView.setText(yingqc+"\n应清查");
        Yqc_TextView.setText(yqc+"\n已清查");
        Wqc_TextView.setText(wqc+"\n未清查");
    }
    /**
     * 填充数据
     */
    GroupAdapter.OnBindDataToViewListener onBindDataToViewListener=new GroupAdapter.OnBindDataToViewListener(){

        @Override
        public void OnBindDataToView(int position, Map<String, ?> data, View v) {
            TextView acc_type_tv=(TextView)v.findViewById(R.id.acc_type);
            TextView remark_tv=(TextView)v.findViewById(R.id.remark);
            TextView dept_name_tv=(TextView)v.findViewById(R.id.dept_name);
            TextView check_dept_name_tv=(TextView)v.findViewById(R.id.check_dept_name);

            String use_state=data.containsKey("USE_STATE")?data.get("USE_STATE").toString():"";
            int ZK_FLAG=data.containsKey("ZK_FLAG")?Integer.parseInt((String)data.get("ZK_FLAG")):0;
            int CHECK_FLAG=data.containsKey("CHECK_FLAG")?Integer.parseInt((String)data.get("CHECK_FLAG")):0;
            String acc_type=data.containsKey("ACC_TYPE")?data.get("ACC_TYPE").toString():"";
            String dept_name=data.containsKey("DEPT_NAME")?(String)data.get("DEPT_NAME"):"";
            String check_dept_name=data.containsKey("CHECK_DEPT_NAME")?(String)data.get("CHECK_DEPT_NAME"):"";
            dept_name_tv.setText("(使用)"+dept_name);
            if(TextUtils.isEmpty(check_dept_name)){ check_dept_name_tv.setText(""); }else{ check_dept_name_tv.setText("(清查)"+check_dept_name); }
            dept_name_tv.setTextColor(getResources().getColor(R.color.black));
            if(!dept_name.equals(mDept_Check.DEPT_NAME)){
                dept_name_tv.setTextColor(getResources().getColor(R.color.red));
            }
            //备注信息
            String remark="";
            if(!TextUtils.isEmpty((data.containsKey("USERDEPT_NAME")?(String)data.get("USERDEPT_NAME"):""))){
                remark+=" "+(String)data.get("USERDEPT_NAME")+" |";
            }
            if(!TextUtils.isEmpty((data.containsKey("USER_NAME")?(String)data.get("USER_NAME"):""))){
                remark+=" "+(String)data.get("USER_NAME")+" |";
            }
            if(!TextUtils.isEmpty((data.containsKey("USERADD")?(String)data.get("USERADD"):""))){
                remark+=" "+(String)data.get("USERADD")+" |";
            }
            Drop_Down_Item item=new Drop_Down_Item();
            item.Value=""+(data.containsKey("COMMENT_STATE")?(String)data.get("COMMENT_STATE"):"");
            int i=DropDownSources.indexOf(item, DropDownSources.getComment_State());
            if(i!=-1){
                remark+=" "+ DropDownSources.getComment_State().get(i).Name+" |";
            }
            if(!TextUtils.isEmpty((data.containsKey("IDENTIFICATION_NO")?(String)data.get("IDENTIFICATION_NO"):""))){
                remark+=" "+(String)data.get("IDENTIFICATION_NO")+" |";
            }
            if(remark.length()>1){
                remark=remark.substring(0,remark.length()-1);
            }
            remark_tv.setText(remark);
            if(TextUtils.isEmpty(remark)){ remark_tv.setVisibility(View.GONE); }else{ remark_tv.setVisibility(View.VISIBLE);  }
            String text="";
            ForegroundColorSpan foreSpan = new ForegroundColorSpan(getResources().getColor(R.color.black));
            if(acc_type.equals("1")){
                text="固定资产";
            }else if(acc_type.equals("2")){
                text="低值易耗";
            }else if(acc_type.equals("3")){
                text="消耗材料";
            }
            int index=DropDownSources.indexOf(use_state, DropDownSources.getUse_State());
            if(index!=-1){
                text+="("+DropDownSources.getUse_State().get(index).Name+")";
            }
            int start=text.length();
            if(CHECK_FLAG==0){
                text+=" 未清查";
                foreSpan = new ForegroundColorSpan(getResources().getColor(R.color.red));
            }else{
                text+=" 已清查";
                //清查科室和使用科室不同
                if(!dept_name.equals(check_dept_name)){
                    if(ZK_FLAG==0){
                        text+="(保留)";
                    }else{
                        text+="(转科)";
                    }
                    check_dept_name_tv.setVisibility(View.VISIBLE);
                }else{
                    check_dept_name_tv.setVisibility(View.GONE);
                }
                foreSpan = new ForegroundColorSpan(getResources().getColor(R.color.green));
            }
            SpannableStringBuilder builder = new SpannableStringBuilder(text);
            builder.setSpan(foreSpan, start, text.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            acc_type_tv.setText(builder);
        }

    };

    /**
     * 应清查按钮点击
     */
    View.OnClickListener Qb_TextView_Click=new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            // TODO 自动生成的方法存根
            LinkedList<HashMap<String, String>> temp=new LinkedList<HashMap<String,String>>();
            for(HashMap<String, String> item:mRows){
                String DEPT_ID=item.containsKey("DEPT_ID")?item.get("DEPT_ID"):"";
                //应清查就是本科室的设备
                if(mDept_Check.DEPT_ID.equals(DEPT_ID)){
                    temp.add(item);
                }
            }
            adapter.setData(temp);
            adapter.notifyDataSetChanged();
            ClearFocus();
            HelperManager.getControlsHelper().setFocusable(v, true);
        }
    };
    /**
     * 已清查按钮点击
     */
    View.OnClickListener Yqc_TextView_Click=new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            LinkedList<HashMap<String, String>> temp=new LinkedList<HashMap<String,String>>();
            for(HashMap<String, String> item:mRows){
                int CHECK_FLAG=item.containsKey("CHECK_FLAG")?Integer.parseInt((String)item.get("CHECK_FLAG")):0;
                if(CHECK_FLAG==1){
                    temp.add(item);
                }
            }
            adapter.setData(temp);
            adapter.notifyDataSetChanged();
            ClearFocus();
            HelperManager.getControlsHelper().setFocusable(v, true);
        }
    };
    /**
     * 未清查按钮点击
     */
    View.OnClickListener Wqc_TextView_Click=new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            // TODO 自动生成的方法存根
            LinkedList<HashMap<String, String>> temp=new LinkedList<HashMap<String,String>>();
            for(HashMap<String, String> item:mRows){
                String DEPT_ID=item.containsKey("DEPT_ID")?item.get("DEPT_ID"):"";
                int CHECK_FLAG=item.containsKey("CHECK_FLAG")?Integer.parseInt((String)item.get("CHECK_FLAG")):0;
                //未清查就是本科室没有清查的设备
                if(CHECK_FLAG==0 && mDept_Check.DEPT_ID.equals(DEPT_ID)){
                    temp.add(item);
                }
            }
            adapter.setData(temp);
            adapter.notifyDataSetChanged();
            ClearFocus();
            HelperManager.getControlsHelper().setFocusable(v, true);
        }
    };

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(resultCode== Activity.RESULT_OK){
            switch(requestCode){
                //台账保存过
                case Product_Change:{
                    Assets assets=(Assets)data.getSerializableExtra("assets");
                    int position=indexOf(assets,mRows);
                    if(position!=-1){
                        HashMap<String, String> obj=mRows.get(position);
                        replaceAssets(obj,assets);
                    }
                    break;
                }
                //扫描结果变化
                case ScanResults_Change:{
				/*java.lang.reflect.Type listType = new TypeToken<LinkedList<Assets>>() {}.getType();
				LinkedList<Assets>assets_list= HelperManager.getEntityHelper().toListEntity(data.getStringExtra("assets_list"), listType);
				for(Assets item:assets_list){
					int position=indexOf(item,mRows);
					if(position!=-1){
						HashMap<String, String> obj=mRows.get(position);
						replaceAssets(obj,item);
					}
				}*/
                    initData();
                    break;
                }
                //扫一扫扫描结果返回
                case SCANNIN_GREQUEST_CODE:
                    Bundle bundle = data.getExtras();
                    if(bundle==null)return;
                    getAssetsNetWork(bundle.getString("result"));
                    break;
            }
            refresh();
            //有变更过
            setResult(Activity.RESULT_OK);
        }
    }
    /**
     * 替换台账
     * @param source 源台账信息
     * @param assets 要替换的台账信息
     */
    public void replaceAssets(HashMap<String, String> source,Assets assets){
        if(source==null || assets==null){return;}
        source.put("ZK_FLAG", ""+assets.ZK_FLAG);
        source.put("CHECK_FLAG", ""+assets.CHECK_FLAG);
        source.put("CHECK_DEPT_ID", assets.CHECK_DEPT_ID);
        source.put("CHECK_DEPT_NAME", assets.CHECK_DEPT_NAME);
        source.put("USERDEPT_NAME", assets.USERDEPT_NAME);
        source.put("USER_ID", assets.USER_ID);
        source.put("USER_NAME", assets.USER_NAME);
        source.put("USERADD", assets.USERADD);
        //source.put("CHECK_STATE", ""+assets.CHECK_STATE);
        source.put("COMMENT_NAME", ""+assets.COMMENT_NAME);
        source.put("COMMENT_STATE", ""+assets.COMMENT_STATE);
        source.put("IDENTIFICATION_NO", assets.IDENTIFICATION_NO);
    }
    /**
     * 在集合中查找对应的台账
     */
    public int indexOf(Assets assets,LinkedList<HashMap<String, String>> rows){
        if(assets==null || rows==null){return -1;}
        for(int i =0;i<rows.size();i++){
            if(assets.ASSETS_ID.equals(rows.get(i).get("ASSETS_ID"))){
                return i;
            }
        }
        return -1;
    }
    /**
     * 清空焦点
     */
    public void ClearFocus(){
        HelperManager.getControlsHelper().setFocusable(Qb_TextView, false);
        HelperManager.getControlsHelper().setFocusable(Yqc_TextView, false);
        HelperManager.getControlsHelper().setFocusable(Wqc_TextView, false);
    }
    /**
     * 返回登录页面
     */
    View.OnClickListener Back_ImageView_Click=new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            finish();
        }
    };
    /**
     * 搜索按钮点击
     */
    View.OnClickListener Search_ImageView_Click=new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            iv_sys.setVisibility(View.GONE);
            Bj_LinearLayout.setVisibility(View.GONE);
            Title_TextView.setVisibility(View.GONE);
            Search_ImageView.setVisibility(View.GONE);
            tv_finish.setVisibility(View.GONE);
            Cancel_TextView.setVisibility(View.VISIBLE);
            KeyWrod_EditText.setVisibility(View.VISIBLE);
            HelperManager.getInputMethodHelper().showInputMethod(KeyWrod_EditText, AssetCheckList_Activity.this);
        }
    };
    /**
     * 取消搜索按钮点击
     */
    View.OnClickListener Cancel_TextView_Click=new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            if("1".equals(mSCM_PDA_CAM_SCAN)){
                iv_sys.setVisibility(View.VISIBLE);
            }
            Bj_LinearLayout.setVisibility(View.VISIBLE);
            Title_TextView.setVisibility(View.VISIBLE);
            Search_ImageView.setVisibility(View.VISIBLE);
            tv_finish.setVisibility(View.VISIBLE);
            Cancel_TextView.setVisibility(View.GONE);
            KeyWrod_EditText.setText("");
            KeyWrod_EditText.setVisibility(View.GONE);
            HelperManager.getInputMethodHelper().hideInputMethod(AssetCheckList_Activity.this);
            Qb_TextView.callOnClick();
        }
    };
    /**
     * 搜索值变化
     */
    TextWatcher textWatcher=new TextWatcher(){

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            // TODO 自动生成的方法存根

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            LinkedList<HashMap<String, String>> temp=new LinkedList<HashMap<String,String>>();
            for(HashMap<String, String> item:mRows){
                if(item.containsKey("SERIAL_CODE") && item.get("SERIAL_CODE").toString().contains(s)){
                    temp.add(item);
                }
            }
            adapter.setData(temp);
            adapter.notifyDataSetChanged();
        }

        @Override
        public void afterTextChanged(Editable s) {
            // TODO 自动生成的方法存根

        }
    };
    /**
     * 扫描模式点击
     */
    View.OnClickListener ll_scantype_Click=new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            int type=Integer.parseInt((String)v.getTag());
            //切换成RFID
            if(type==0){
                tv_scantype_content.setText("RFID");

                v.setTag("1");
                ScanningDevice.getSington().stopBarcode();
                //开启超高频
                ScanningDevice.getSington().startUhf();
                if(mReaderBarcode!=null){
                    mReaderBarcode.close();
                    mReaderBarcode = null;
                }

            }
        }
    };
    /**
     * 确认按钮
     */
    View.OnClickListener tv_finish_Click=new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            mCustormDialog1.show();
            AssetCheckList_Activity.this.getMyHandler().postDelayed(new Runnable() {

                @Override
                public void run() {
                    HelperManager.getInputMethodHelper().toggleInput(AssetCheckList_Activity.this);
                }
            }, 300);
            mCustormDialog1.setViewClickListener(R.id.ok, new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    String user_code=mCustormDialog1.getEditTextText(R.id.et_user_code);
                    String user_pash=mCustormDialog1.getEditTextText(R.id.et_user_pash);
                    if(TextUtils.isEmpty(user_code)){ Toast.makeText(AssetCheckList_Activity.this, "工号不能为空!", Toast.LENGTH_SHORT).show(); return; }
                    String server_url= HelperManager.getAppConfigHelper().getDataString(getResources().getString(R.string.server_url), "")
                            + getResources().getString(R.string.assets_check_deptfinsh);
                    String store_id=HelperManager.getAppConfigHelper().getDataString("store_id", "");
                    String position_id=HelperManager.getAppConfigHelper().getDataString("position_id", "");
                    HashMap<String, String> parms = new HashMap<String, String>();
                    parms.put("hospital_id", HelperManager.getAppConfigHelper().getDataString("hospital_id", ""));
                    parms.put("dept_id", mDept_Check.DEPT_ID);
                    parms.put("user_code", user_code);
                    parms.put("pass_hash", HelperManager.getMD5Helper().getMD5(user_pash));
                    if (!TextUtils.isEmpty(store_id)) { parms.put("store_id", store_id); }
                    if (!TextUtils.isEmpty(position_id)) { parms.put("position_id", position_id); }
                    parms.put("operate_id", HelperManager.getAppConfigHelper().getDataString("user_id", ""));
                    parms.put("operate_name", HelperManager.getAppConfigHelper().getDataString("user_name", ""));
                    Dialog mDialog = AssetCheckList_Activity.this.showLoadingCustormDialog();
                    HelperManager.getDownNetWorkHelper().postString(server_url, parms, new DownNetWorkHelper.SuccessListener<String>() {

                        @Override
                        public void onResponse(String arg0) {
                            JsonObject json = DefaultSuccessListener.getJsonObjectRules(arg0);
                            if (json == null) {
                                AssetCheckList_Activity.this.dismissCustormDialog();
                                return;
                            }
                            mCustormDialog1.hide();
                            Toast.makeText(AssetCheckList_Activity.this, "操作成功!", Toast.LENGTH_SHORT).show();
                            setResult(Activity.RESULT_OK);
                            finish();
                            AssetCheckList_Activity.this.dismissCustormDialog();
                        }
                    },new DefaultErrorListener(mDialog));
                }
            });
        }
    };
    /**
     * 扫一扫
     */
    View.OnClickListener iv_sys_Click=new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            Intent intent = new Intent();
            intent.setClass(AssetCheckList_Activity.this, MipcaActivityCapture.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            AssetCheckList_Activity.this.startActivityForResult(intent, SCANNIN_GREQUEST_CODE);
        }
    };
    @Override
    protected void onStart() {
        super.onStart();

    }
    @Override
    public void onResume() {
        // 注册广播监听
        mScannerReceiver = HelperManager.getBroadcastReceiverHelper().getScannerReceiver(scannerReceiver_onReceive);
        mScannerReceiver.registerReceiver(this);
        mScannerReceiver.sendEnabled(this, true);

        ScanningDevice.getSington().setDeviceResult(deviceResult);
        super.onResume();
    }
    ScanningDevice.DeviceResult deviceResult=new ScanningDevice.DeviceResult(){

        @Override
        public void MSG_KEY_DOWN() {
            // TODO 自动生成的方法存根
            showScanResults(null,mRows);
        }

        @Override
        public void MSG_KEY_UP() {
            // TODO 自动生成的方法存根

        }

        @Override
        public void SCANNING_DATE(Message msg) {
            // TODO 自动生成的方法存根

        }

        @Override
        public void MSG_DATA_BARCODE(Message msg) {
            // TODO 自动生成的方法存根

        }

    };

    /**
     * 扫描仪扫描广播接受
     */
    ScannerReceiver.ScannerReceiver_onReceive scannerReceiver_onReceive = new ScannerReceiver.ScannerReceiver_onReceive() {

        @Override
        public void onReceive(Context context, Intent request) {
            // TODO 自动生成的方法存根
            // 获取扫描结果
            String result = request.getStringExtra(ScannerReceiver.KEY_DATA);
            if (TextUtils.isEmpty(result)) {
                Toast.makeText(AssetCheckList_Activity.this, "该条码为空!", Toast.LENGTH_SHORT).show();
                return;
            }
            result=result.trim();
            getAssetsNetWork(result);
        }
    };
    /**
     * 扫描台账
     * @param result 扫到的台账编号
     */
    public void getAssetsNetWork(String result){
        if(result!=null){result = result.trim();} //处理扫码结果，否则路径不对
        String serial_code= PubUtils.getSerialCode(result);
        if(!TextUtils.isEmpty(serial_code)){ result=serial_code; }
        if(TextUtils.isEmpty(result)){ Toast.makeText(AssetCheckList_Activity.this, "该条码中找不到相应的台账编号信息!", Toast.LENGTH_SHORT).show();return; }

        String store_id=HelperManager.getAppConfigHelper().getDataString("store_id", "");
        String position_id=HelperManager.getAppConfigHelper().getDataString("position_id", "");
        String server_url = HelperManager.getAppConfigHelper().getDataString(getResources().getString(R.string.server_url), "")
                + getResources().getString(R.string.assets_check_check_info);
        HashMap<String, String> parms = new HashMap<String, String>();
        parms.put("hospital_id", HelperManager.getAppConfigHelper().getDataString("hospital_id", ""));
        parms.put("serial_code", result);
        if (!TextUtils.isEmpty(store_id)) { parms.put("store_id", store_id); }
        if (!TextUtils.isEmpty(position_id)) { parms.put("position_id", position_id); }
        System.out.println("列表页：" + server_url + "   |   " + parms.toString());
        Dialog mDialog= AssetCheckList_Activity.this.showLoadingCustormDialog();
        HelperManager.getDownNetWorkHelper().postString(server_url, parms, ScannerReceiver_Success, new DefaultErrorListener(mDialog));
    }
    /**
     * 扫描仪扫描成功返回
     */
    DownNetWorkHelper.SuccessListener<String> ScannerReceiver_Success = new DownNetWorkHelper.SuccessListener<String>() {

        @Override
        public void onResponse(String arg0) {
            JsonObject json = DefaultSuccessListener.getJsonObjectRules(arg0);
            if (json == null) {
                AssetCheckList_Activity.this.dismissCustormDialog();
                return;
            }
            JsonObject data = json.getAsJsonObject("data");
            Assets assets= HelperManager.getEntityHelper().toEntity(data, Assets.class);
            assets.isSearch=1;
            showScanResults(assets,mRows);
            AssetCheckList_Activity.this.dismissCustormDialog();
        }
    };
    /**
     * 显示扫描结果
     * @param assets 扫到的台账
     * @param assets_list 台账源集合，进行快速查找
     */
    public void showScanResults(Assets assets,LinkedList<HashMap<String, String>> assets_list){
        if(assets_list==null){ return; }
        Intent intent=new Intent();
        intent.putExtra("scantype", Integer.parseInt((String)ll_scantype.getTag()));
        intent.putExtra("tv_asset_scan", (String)tv_asset_scan.getTag());
        intent.putExtra("assets", assets);

		/*java.lang.reflect.Type listType = new TypeToken<LinkedList<Assets>>() {}.getType();
		LinkedList<Assets> temporaryAssetsList= HelperManager.getEntityHelper().toListEntity(HelperManager.getEntityHelper().toString(assets_list),  listType);
		TemporaryData.setAssetsList(temporaryAssetsList);*/
        intent.putExtra("check_dept_id", mDept_Check.DEPT_ID);
        intent.putExtra("check_dept_name", mDept_Check.DEPT_NAME);
        intent.setClass(AssetCheckList_Activity.this, ScanRepair_Activty.class);
        AssetCheckList_Activity.this.startActivityForResult(intent,ScanResults_Change);
    }
    @Override
    protected void onPause() {
        if (mScannerReceiver != null) {
            // 禁用扫描头
            mScannerReceiver.unregisterReceiver(this);
        }
        ScanningDevice.getSington().setDeviceResult(null);

        if(mReaderBarcode!=null){
            mReaderBarcode.close();
            mReaderBarcode = null;
        }


        super.onPause();
    }
    @Override
    protected void onDestroy() {
        //关闭超高频和条码
        ScanningDevice.getSington().stopUhf();
        ScanningDevice.getSington().stopBarcode();

        if(mReaderBarcode!=null){
            mReaderBarcode.close();
            mReaderBarcode = null;
        }
        super.onDestroy();
    }

    public Barcode2DWithSoft.ScanCallback mScanCallback = new Barcode2DWithSoft.ScanCallback() {
        @Override
        public void onScanComplete(int i, int length, byte[] data) {
            if (length < 1) {
                return ;
            }
            String barCode = new String(data);
			/*if (!barCode.isEmpty()) {
				SoundManage.PlaySound(MainActivity.this, SoundType.SUCCESS);
			}*/
            getAssetsNetWork(barCode);
        }
    };
    View.OnClickListener  tv_asset_scan_click=new View.OnClickListener() {
        @Override
        public void onClick(View view) {
             Intent  intent=new Intent();
            intent.setClass(AssetCheckList_Activity.this, ScanRepair_Activty.class);
            startActivity(intent);
        }
    };
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == 139 || keyCode == 280) {
            if (event.getRepeatCount() == 0) {
                if("BARCODE".equals((String)tv_scantype_content.getTag())){
                    if(mReaderBarcode==null){
                        mReaderBarcode = new ScaningDeviceBarcode_CW(AssetCheckList_Activity.this, mScanCallback);
                        mReaderBarcode.open();
                    }
                    mReaderBarcode.san();
                }


                showScanResults(null,mRows);

            }
        }
        return super.onKeyDown(keyCode, event);
    }

}
